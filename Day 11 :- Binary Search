Problem 1:- The Nth root of an integer
Code:- 

 int NthRoot(int n, int m) {
  // Write your code here.

         int s=0;
         int end=m;

         while(s<=end){
           int mid=s+(end-s)/2;

            if(pow(mid,n)==m)
            return mid;

            else if(pow(mid,n)<m)
            s=mid+1;

            else
            end=mid-1;
         }

         return -1;
}


////////////////////////////////////////////////////////////////////////////////////////

Problem 2:- Median of a rowwise sorted matrix
code:-  

int countSmallerThanMid(vector<int> &row, int mid)
{
  int l = 0, h = row.size() - 1;
  while (l <= h)
  {
    int md = (l + h) >> 1;
    if (row[md] <= mid)
    {
      l = md + 1;
    }
    else
    {
      h = md - 1;
    }
  }
  return l;
}
int findMedian(vector<vector<int>> &A)
{
  int low = 1;
  int high = 1e9;
  int n = A.size();
  int m = A[0].size();
  while (low <= high)
  {
    int mid = (low + high) >> 1;
    int cnt = 0;
    for (int i = 0; i < n; i++)
    {
       //for each row counting number smaller than or equal to mid using binary search
      cnt += countSmallerThanMid(A[i], mid);
    }
    if (cnt <= (n * m) / 2)
      low = mid + 1;
    else
      high = mid - 1;
  }
  return low;
}

int median(vector<vector<int>> &matrix, int m, int n) {
    // Write your code here.

    return findMedian(matrix);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Problem 3:- Find the element that appears once rest all appears twice
code:- 

class Solution {
public:
    int singleNonDuplicate(vector<int>& arr) {
        
        int n=arr.size();

        if(n==1)
        return arr[0];

        if(arr[0]!=arr[1])
        return arr[0];

        if(arr[n-1]!=arr[n-2])
        return arr[n-1];

        int s=1;
        int e=n-2;

        while(s<=e){

            int mid=s+(e-s)/2;

             if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])
             return arr[mid];

             int i=mid;

             if((i % 2 == 0 && arr[i] == arr[i+1]) || (i%2 == 1 && arr[i] == arr[i-1]))
             s=mid+1;

             else if((i % 2 == 0 && arr[i] == arr[i-1]) || (i%2 == 1 && arr[i] == arr[i+1]))
             e=mid-1;
        }

        return -1;
    }
};


