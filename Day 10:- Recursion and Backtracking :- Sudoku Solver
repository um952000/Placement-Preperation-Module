
bool isSafe(int row,int col,vector<vector<int>>& board, int val){

    for(int i=0;i<board.size();i++){

        // row check
        if(board[row][i]==val)
        return false;

        //col check
        if(board[i][col]==val)
        return false;

        //3*3 matrix check
        if(board[3*(row/3) +i/3][3*(col/3)+i%3]==val)
        return false;
    }

    return true;
}

bool solve(vector<vector<int>> &board){

    int n=board[0].size();

    for(int row=0;row<n;row++){
        for(int col=0;col<n;col++){

             //cell empty
            if(board[row][col]==0){

                for(int val=1;val<=9;val++){

                    if(isSafe(row,col,board,val)){

                        board[row][col]=val;
                        //recursive call

                        bool ageSolutionPossible = solve(board);

                        if(ageSolutionPossible)
                        return true;
                        else
                        {
                            //backtrack
                            board[row][col]=0;
                        }
                    }

                }

                return false;
            }
        }
    }

    return true;
}


bool sudokuSolver(int board[][9]) {
    /* Don't write main().
     *  Don't read input, it is passed as function argument.
     *  Don't print output and return output as specified in the question
    */
       
       vector<vector<int>> sudoku(9,vector<int>(9,0));

       for(int i=0;i<9;i++){
           for(int j=0;j<9;j++){
               sudoku[i][j]=board[i][j];
           }
       }
    return solve(sudoku);
}
