class Solution {
public:
    
     ListNode* reversekorder(ListNode* head, int k, int count) {
        
        if(head==NULL || head->next==NULL){
           return head;
        }
        
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        int cnt=1;
         
        

     while(curr!=NULL && cnt<=k){
            
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            cnt++;
        
     }
             
             count=count-k;
          while(count>=k){
       
              if(next!=NULL)
           head->next=reversekorder(next,k,count);
         
         return prev;
              
          }
        
       head->next=curr;
         
         return prev;
    }
    
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        if(head==NULL && head->next==NULL)
            return head;
        ListNode* t=head;
            
            int count=0;
        
        while(t!=NULL){

           t=t->next;
            count++;
        }
        
        // cout<<count<<endl;
        // return head;
        
      return  reversekorder(head,k,count);
        
        }
};
